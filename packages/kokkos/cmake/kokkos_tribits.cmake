INCLUDE(CMakeParseArguments)
INCLUDE(CTest)

cmake_policy(SET CMP0054 NEW)

MESSAGE(STATUS "The project name is: ${PROJECT_NAME}")

IF(NOT DEFINED ${PROJECT_NAME}_ENABLE_OpenMP)
  SET(${PROJECT_NAME}_ENABLE_OpenMP OFF)
ENDIF()

IF(NOT DEFINED ${PROJECT_NAME}_ENABLE_HPX)
  SET(${PROJECT_NAME}_ENABLE_HPX OFF)
ENDIF()

IF(NOT DEFINED ${PROJECT_NAME}_ENABLE_DEBUG)
  SET(${PROJECT_NAME}_ENABLE_DEBUG OFF)
ENDIF()

IF(NOT DEFINED ${PROJECT_NAME}_ENABLE_CXX11)
  SET(${PROJECT_NAME}_ENABLE_CXX11 ON)
ENDIF()

IF(NOT DEFINED ${PROJECT_NAME}_ENABLE_TESTS)
  SET(${PROJECT_NAME}_ENABLE_TESTS OFF)
ENDIF()

IF(NOT DEFINED TPL_ENABLE_Pthread)
  SET(TPL_ENABLE_Pthread OFF)
ENDIF()

FUNCTION(ASSERT_DEFINED VARS)
  FOREACH(VAR ${VARS})
    IF(NOT DEFINED ${VAR})
      MESSAGE(SEND_ERROR "Error, the variable ${VAR} is not defined!")
    ENDIF()
  ENDFOREACH()
ENDFUNCTION()

if (NOT KOKKOS_HAS_TRILINOS)
MACRO(GLOBAL_SET VARNAME)
  SET(${VARNAME} ${ARGN} CACHE INTERNAL "")
ENDMACRO()

FUNCTION(VERIFY_EMPTY CONTEXT)
if(${ARGN})
MESSAGE(FATAL_ERROR "Kokkos does not support all of Tribits. Unhandled arguments in ${CONTEXT}:\n${ARGN}")
endif()
ENDFUNCTION()

MACRO(PREPEND_GLOBAL_SET VARNAME)
  ASSERT_DEFINED(${VARNAME})
  GLOBAL_SET(${VARNAME} ${ARGN} ${${VARNAME}})
ENDMACRO()

MACRO(PREPEND_TARGET_SET VARNAME TARGET_NAME TYPE)
  IF(TYPE STREQUAL "REQUIRED")
    SET(REQUIRED TRUE)
  ELSE()
    SET(REQUIRED FALSE)
  ENDIF()
  IF(TARGET ${TARGET_NAME})
    PREPEND_GLOBAL_SET(${VARNAME} ${TARGET_NAME})
  ELSE()
    IF(REQUIRED)
      MESSAGE(FATAL_ERROR "Missing dependency ${TARGET_NAME}")
    ENDIF()
  ENDIF()
ENDMACRO()
endif()


FUNCTION(KOKKOS_CONFIGURE_FILE  PACKAGE_NAME_CONFIG_FILE)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_CONFIGURE_FILE(${PACKAGE_NAME_CONFIG_FILE})
  else()
    # Configure the file
    CONFIGURE_FILE(
      ${PACKAGE_SOURCE_DIR}/cmake/${PACKAGE_NAME_CONFIG_FILE}.in
      ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME_CONFIG_FILE}
      )
  endif()
ENDFUNCTION()

MACRO(KOKKOS_ADD_TEST_DIRECTORIES)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_ADD_TEST_DIRECTORIES(${ARGN})
  else()
    IF(${${PROJECT_NAME}_ENABLE_TESTS})
      FOREACH(TEST_DIR ${ARGN})
        ADD_SUBDIRECTORY(${TEST_DIR})
      ENDFOREACH()
    ENDIF()
  endif()
ENDMACRO()

MACRO(KOKKOS_ADD_EXAMPLE_DIRECTORIES)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_ADD_EXAMPLE_DIRECTORIES(${ARGN})
  else()
    IF(${PACKAGE_NAME}_ENABLE_EXAMPLES OR ${PARENT_PACKAGE_NAME}_ENABLE_EXAMPLES)
      FOREACH(EXAMPLE_DIR ${ARGN})
        ADD_SUBDIRECTORY(${EXAMPLE_DIR})
      ENDFOREACH()
    ENDIF()
  endif()
ENDMACRO()


MACRO(ADD_INTERFACE_LIBRARY LIB_NAME)
  FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/dummy.cpp "")
  ADD_LIBRARY(${LIB_NAME} STATIC ${CMAKE_CURRENT_BINARY_DIR}/dummy.cpp)
  SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES INTERFACE TRUE)
ENDMACRO()


FUNCTION(KOKKOS_INTERNAL_ADD_LIBRARY LIBRARY_NAME)
  CMAKE_PARSE_ARGUMENTS(PARSE 
    "STATIC;SHARED"
    ""
    "HEADERS;SOURCES"
    ${ARGN})

  IF(PARSE_HEADERS)
    LIST(REMOVE_DUPLICATES PARSE_HEADERS)
  ENDIF()
  IF(PARSE_SOURCES)
    LIST(REMOVE_DUPLICATES PARSE_SOURCES)
  ENDIF()

  ADD_LIBRARY(
    ${LIBRARY_NAME}
    ${PARSE_HEADERS}
    ${PARSE_SOURCES}
  )

  TARGET_COMPILE_OPTIONS(
    ${LIBRARY_NAME}
    PUBLIC $<$<COMPILE_LANGUAGE:CXX>:${KOKKOS_CXX_FLAGS}>
  )

  if(${CMAKE_VERSION} VERSION_GREATER "3.13" OR ${CMAKE_VERSION} VERSION_EQUAL "3.13")
    TARGET_LINK_OPTIONS(
      ${LIBRARY_NAME}
      PUBLIC ${KOKKOS_LD_FLAGS}
    )
  else()
    #well, this is annoying - I am going to need to hack this for Visual Studio
    TARGET_LINK_LIBRARIES(
      ${LIBRARY_NAME} PUBLIC ${KOKKOS_LD_FLAGS}
    )
  endif()


  TARGET_INCLUDE_DIRECTORIES(
    ${LIBRARY_NAME}
    PUBLIC ${KOKKOS_TPL_INCLUDE_DIRS}
  )

  foreach(lib IN LISTS KOKKOS_TPL_LIBRARY_NAMES)
    if (("${lib}" STREQUAL "cuda") AND (NOT "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"))
      set(LIB_cuda "-lcuda")
      target_link_libraries(${LIBRARY_NAME} PUBLIC cuda)
    elseif ("${lib}" STREQUAL "hpx")
      find_package(HPX REQUIRED)
      if(${HPX_FOUND})
        target_link_libraries(${LIBRARY_NAME} PUBLIC ${HPX_LIBRARIES})
        target_include_directories(${LIBRARY_NAME} PUBLIC ${HPX_INCLUDE_DIRS})
      else()
        message(ERROR "HPX not found. Check the value of HPX_DIR (= ${HPX_DIR}) or CMAKE_PREFIX_PATH (= ${CMAKE_PREFIX_PATH}).")
      endif()
    else()
      find_library(LIB_${lib} ${lib} PATHS ${KOKKOS_TPL_LIBRARY_DIRS})
      target_link_libraries(${LIBRARY_NAME} PUBLIC ${LIB_${lib}})
    endif()
  endforeach()

  INSTALL(
    TARGETS ${LIBRARY_NAME}
    EXPORT ${PROJECT_NAME}
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    COMPONENT ${PACKAGE_NAME}
  )

  INSTALL(
    TARGETS ${LIBRARY_NAME}
    EXPORT KokkosTargets
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
  )

  INSTALL(
    FILES  ${PARSE_HEADERS}
    DESTINATION include
    COMPONENT ${PACKAGE_NAME}
  )

  #Can we please add a remove duplicates to property append
  GET_PROPERTY(LIBLIST GLOBAL PROPERTY KOKKOS_LIBRARIES_NAMES)
  LIST(APPEND LIBLIST ${LIBRARY_NAME})
  LIST(REMOVE_DUPLICATES LIBLIST)
  SET_PROPERTY(GLOBAL PROPERTY KOKKOS_LIBRARIES_NAMES ${LIBLIST})
  GET_PROPERTY(LIBLIST GLOBAL PROPERTY KOKKOS_LIBRARIES_NAMES)
  VERIFY_EMPTY(KOKKOS_ADD_LIBRARY ${PARSE_UNPARSED_ARGUMENTS})
ENDFUNCTION(KOKKOS_INTERNAL_ADD_LIBRARY LIBRARY_NAME)

FUNCTION(KOKKOS_ADD_LIBRARY LIBRARY_NAME)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_ADD_LIBRARY(${LIBRARY_NAME} ${ARGN})
  elseif(KOKKOS_SEPARATE_LIBS)
    KOKKOS_INTERNAL_ADD_LIBRARY(
      ${LIBRARY_NAME} ${ARGN})
  else()
    CMAKE_PARSE_ARGUMENTS(PARSE
      ""
      ""
      "SOURCES;HEADERS"
      ${ARGN})
    #just append the headers and sources to the list
    SET_PROPERTY(GLOBAL APPEND PROPERTY KOKKOS_ALL_SOURCES ${PARSE_SOURCES})
    GET_PROPERTY(SRCS GLOBAL PROPERTY KOKKOS_ALL_SOURCES)
  endif()
ENDFUNCTION()

FUNCTION(KOKKOS_ADD_EXECUTABLE EXE_NAME)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_ADD_EXECUTABLE(${EXE_NAME} ${ARGN})
  else()
    CMAKE_PARSE_ARGUMENTS(PARSE 
      "TESTONLY"
      ""
      "SOURCES;TESTONLYLIBS"
      ${ARGN})

    ADD_EXECUTABLE(${EXE_NAME} ${PARSE_SOURCES})
    IF (PARSE_TESTONLYLIBS)
      TARGET_LINK_LIBRARIES(${EXE_NAME} ${PARSE_TESTONLYLIBS})
    ENDIF()
    GET_PROPERTY(liblist GLOBAL PROPERTY KOKKOS_LIBRARIES_NAMES)
    FOREACH(LIB ${liblist})
      TARGET_LINK_LIBRARIES(${EXE_NAME} ${LIB})
    ENDFOREACH()
    VERIFY_EMPTY(KOKKOS_ADD_EXECUTABLE ${PARSE_UNPARSED_ARGUMENTS})
  endif()
ENDFUNCTION()

IF(NOT TARGET check)
  ADD_CUSTOM_TARGET(check COMMAND ${CMAKE_CTEST_COMMAND} -VV -C ${CMAKE_CFG_INTDIR})
ENDIF()

FUNCTION(KOKKOS_ADD_TEST EXE_NAME)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_ADD_TEST(${EXE_NAME}
      ${ARGN} 
      COMM serial mpi
      NUM_MPI_PROCS 1
    )
  else()
    CMAKE_PARSE_ARGUMENTS(TEST 
      "WILL_FAIL"
      "NAME;FAIL_REGULAR_EXPRESSION;PASS_REGULAR_EXPRESSION"
      "CATEGORIES"
      ${ARGN})
    SET(EXE ${PACKAGE_NAME}_${EXE_NAME})
    IF(WIN32)
      ADD_TEST(NAME ${TEST_NAME} WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH} COMMAND ${EXE}${CMAKE_EXECUTABLE_SUFFIX})
    ELSE()
      ADD_TEST(NAME ${TEST_NAME} COMMAND ${EXE})
    ENDIF()
    IF(TEST_WILL_FAIL)
      SET_TESTS_PROPERTIES(${NAME} PROPERTIES WILL_FAIL ${TEST_WILL_FAIL})
    ENDIF()
    IF(TEST_FAIL_REGULAR_EXPRESSION)
      SET_TESTS_PROPERTIES(${TEST_NAME} PROPERTIES FAIL_REGULAR_EXPRESSION ${TEST_FAIL_REGULAR_EXPRESSION})
    ENDIF()
    IF(TEST_PASS_REGULAR_EXPRESSION)
      SET_TESTS_PROPERTIES(${TEST_NAME} PROPERTIES PASS_REGULAR_EXPRESSION ${TEST_PASS_REGULAR_EXPRESSION})
    ENDIF()
    VERIFY_EMPTY(KOKKOS_ADD_TEST ${TEST_UNPARSED_ARGUMENTS})
  endif()
ENDFUNCTION()

FUNCTION(KOKKOS_ADD_ADVANCED_TEST)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_ADD_ADVANCED_TEST(${ARGN})
  else()
    # TODO Write this
  endif()
ENDFUNCTION()

FUNCTION(KOKKOS_ADD_EXECUTABLE_AND_TEST EXE_NAME)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_ADD_EXECUTABLE_AND_TEST(${EXE_NAME} ${ARGN})
  else()
    CMAKE_PARSE_ARGUMENTS(PARSE 
      ""
      ""
      "SOURCES"
      ${ARGN})

    KOKKOS_ADD_TEST_EXECUTABLE(${EXE_NAME} SOURCES ${PARSE_SOURCES})
    KOKKOS_ADD_TEST(${EXE_NAME} NAME ${EXE_NAME} 
      FAIL_REGULAR_EXPRESSION "  FAILED "
      ${PARSE_UNPARSED_ARGUMENTS})
  endif()
ENDFUNCTION()

MACRO(KOKKOS_CREATE_IMPORTED_TPL_LIBRARY TPL_NAME)
  ADD_INTERFACE_LIBRARY(TPL_LIB_${TPL_NAME})
  TARGET_LINK_LIBRARIES(TPL_LIB_${TPL_NAME} LINK_PUBLIC ${TPL_${TPL_NAME}_LIBRARIES})
  TARGET_INCLUDE_DIRECTORIES(TPL_LIB_${TPL_NAME} INTERFACE ${TPL_${TPL_NAME}_INCLUDE_DIRS})
ENDMACRO()

FUNCTION(KOKKOS_TPL_FIND_INCLUDE_DIRS_AND_LIBRARIES TPL_NAME)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_TPL_FIND_INCLUDE_DIRS_AND_LIBRARIES(${TPL_NAME} ${ARGN})
  else()
    CMAKE_PARSE_ARGUMENTS(PARSE 
      ""
      ""
      "REQUIRED_HEADERS;REQUIRED_LIBS_NAMES"
      ${ARGN})

    SET(_${TPL_NAME}_ENABLE_SUCCESS TRUE)
    IF (PARSE_REQUIRED_LIBS_NAMES)
      FIND_LIBRARY(TPL_${TPL_NAME}_LIBRARIES NAMES ${PARSE_REQUIRED_LIBS_NAMES})
      IF(NOT TPL_${TPL_NAME}_LIBRARIES)
        SET(_${TPL_NAME}_ENABLE_SUCCESS FALSE)
      ENDIF()
    ENDIF()
    IF (PARSE_REQUIRED_HEADERS)
      FIND_PATH(TPL_${TPL_NAME}_INCLUDE_DIRS NAMES ${PARSE_REQUIRED_HEADERS})
      IF(NOT TPL_${TPL_NAME}_INCLUDE_DIRS)
        SET(_${TPL_NAME}_ENABLE_SUCCESS FALSE)
      ENDIF()
    ENDIF()
    IF (_${TPL_NAME}_ENABLE_SUCCESS)
      KOKKOS_CREATE_IMPORTED_TPL_LIBRARY(${TPL_NAME})
    ENDIF()
    VERIFY_EMPTY(KOKKOS_CREATE_IMPORTED_TPL_LIBRARY ${PARSE_UNPARSED_ARGUMENTS})
  endif()
ENDFUNCTION()

MACRO(KOKKOS_SUBPACKAGE NAME)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_SUBPACKAGE(${NAME})
  else()
    SET(PACKAGE_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
    SET(PARENT_PACKAGE_NAME ${PACKAGE_NAME})
    SET(PACKAGE_NAME ${PACKAGE_NAME}${NAME})
    STRING(TOUPPER ${PACKAGE_NAME} PACKAGE_NAME_UC)
    SET(${PACKAGE_NAME}_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
    #ADD_INTERFACE_LIBRARY(PACKAGE_${PACKAGE_NAME})
    #GLOBAL_SET(${PACKAGE_NAME}_LIBS "")
  endif()
ENDMACRO(KOKKOS_SUBPACKAGE)

MACRO(KOKKOS_SUBPACKAGE_POSTPROCESS)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_SUBPACKAGE_POSTPROCESS()
  endif()
ENDMACRO(KOKKOS_SUBPACKAGE_POSTPROCESS)

MACRO(KOKKOS_PACKAGE_DECL)

  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_PACKAGE_DECL(Kokkos)
  else()
    SET(PACKAGE_NAME Kokkos)
    SET(${PACKAGE_NAME}_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
    STRING(TOUPPER ${PACKAGE_NAME} PACKAGE_NAME_UC)
  endif()

  #SET(TRIBITS_DEPS_DIR "${CMAKE_SOURCE_DIR}/cmake/deps")
  #FILE(GLOB TPLS_FILES "${TRIBITS_DEPS_DIR}/*.cmake")
  #FOREACH(TPL_FILE ${TPLS_FILES})
  #  TRIBITS_PROCESS_TPL_DEP_FILE(${TPL_FILE})
  #ENDFOREACH()

ENDMACRO()


MACRO(KOKKOS_PROCESS_SUBPACKAGES)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_PROCESS_SUBPACKAGES()
  else()
    ADD_SUBDIRECTORY(core)
    ADD_SUBDIRECTORY(containers)
    ADD_SUBDIRECTORY(algorithms)
  endif()
ENDMACRO(KOKKOS_PROCESS_SUBPACKAGES)

MACRO(KOKKOS_PACKAGE_DEF)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_PACKAGE_DEF()
  else()
    #do nothing
  endif()
ENDMACRO(KOKKOS_PACKAGE_DEF)

MACRO(KOKKOS_TARGET_COMPILE_OPTIONS TARGET)
if(KOKKOS_HAS_TRILINOS)
  #tribits doesn't support this
  #hopefully compile options got added before this
else()
  TARGET_COMPILE_OPTIONS(${TARGET} ${ARGN})
endif()
ENDMACRO()

MACRO(KOKKOS_SETUP_BUILD_ENVIRONMENT)
 if (NOT KOKKOS_HAS_TRILINOS)
  set(KOKKOS_ENABLE_EXAMPLES OFF CACHE BOOL "Whether to build examples")
  set(KOKKOS_ENABLE_TESTS    OFF CACHE BOOL "Whether to build tests")


  #------------ COMPILER AND FEATURE CHECKS ------------------------------------
  include(${KOKKOS_SRC_PATH}/cmake/kokkos_functions.cmake)
  set_kokkos_cxx_compiler()
  set_kokkos_cxx_standard()

  #------------ GET OPTIONS AND KOKKOS_SETTINGS --------------------------------
  # Add Kokkos' modules to CMake's module path.
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${Kokkos_SOURCE_DIR}/cmake/Modules/")

  set(KOKKOS_CMAKE_VERBOSE True)
  include(${KOKKOS_SRC_PATH}/cmake/kokkos_options.cmake)
  include(${KOKKOS_SRC_PATH}/cmake/kokkos_settings.cmake)

  #------------ GENERATE HEADER AND SOURCE FILES -------------------------------
  execute_process(
    COMMAND ${KOKKOS_SETTINGS} make -f ${KOKKOS_SRC_PATH}/cmake/Makefile.generate_cmake_settings CXX=${CMAKE_CXX_COMPILER} PREFIX=${CMAKE_INSTALL_PREFIX} generate_build_settings
    WORKING_DIRECTORY "${Kokkos_BINARY_DIR}"
    OUTPUT_FILE ${Kokkos_BINARY_DIR}/core_src_make.out
    RESULT_VARIABLE GEN_SETTINGS_RESULT
  )
  if (GEN_SETTINGS_RESULT)
    message(FATAL_ERROR "Kokkos settings generation failed:\n"
        "${KOKKOS_SETTINGS} make -f ${KOKKOS_SRC_PATH}/cmake/Makefile.generate_cmake_settings CXX=${CMAKE_CXX_COMPILER} generate_build_settings")
  endif()
  include(${Kokkos_BINARY_DIR}/kokkos_generated_settings.cmake)
  install(FILES ${Kokkos_BINARY_DIR}/kokkos_generated_settings.cmake DESTINATION lib/cmake/Kokkos)
  install(FILES ${Kokkos_BINARY_DIR}/kokkos_generated_settings.cmake DESTINATION lib/cmake)
  install(FILES ${Kokkos_BINARY_DIR}/kokkos_generated_settings.cmake DESTINATION ${CMAKE_INSTALL_PREFIX})
  string(REPLACE " " ";" KOKKOS_TPL_INCLUDE_DIRS "${KOKKOS_GMAKE_TPL_INCLUDE_DIRS}")
  string(REPLACE " " ";" KOKKOS_TPL_LIBRARY_DIRS "${KOKKOS_GMAKE_TPL_LIBRARY_DIRS}")
  string(REPLACE " " ";" KOKKOS_TPL_LIBRARY_NAMES "${KOKKOS_GMAKE_TPL_LIBRARY_NAMES}")
  list(REMOVE_ITEM KOKKOS_TPL_INCLUDE_DIRS "")
  list(REMOVE_ITEM KOKKOS_TPL_LIBRARY_DIRS "")
  list(REMOVE_ITEM KOKKOS_TPL_LIBRARY_NAMES "")
  set_kokkos_srcs(KOKKOS_SRC ${KOKKOS_SRC})
 endif()
ENDMACRO(KOKKOS_SETUP_BUILD_ENVIRONMENT)

MACRO(KOKKOS_EXCLUDE_AUTOTOOLS_FILES)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_EXCLUDE_AUTOTOOLS_FILES()
  else()
    #do nothing
  endif()
ENDMACRO(KOKKOS_EXCLUDE_AUTOTOOLS_FILES)

MACRO(KOKKOS_ADD_TEST_EXECUTABLE EXE_NAME)
  CMAKE_PARSE_ARGUMENTS(PARSE 
    ""
    ""
    "SOURCES"
    ${ARGN})
  KOKKOS_ADD_EXECUTABLE(${PACKAGE_NAME}_${EXE_NAME} 
    SOURCES ${PARSE_SOURCES}
    TESTONLYLIBS kokkos_gtest ${KOKKOS_TEST_LINK_TARGETS}
    ${PARSE_UNPARSED_ARGUMENTS}
  )
  IF (NOT KOKKOS_HAS_TRILINOS)
    ADD_DEPENDENCIES(check ${PACKAGE_NAME}_${EXE_NAME})
  ENDIF()
ENDMACRO(KOKKOS_ADD_TEST_EXECUTABLE)

MACRO(KOKKOS_ADD_PERFORMANCE_TEST NAME)
KOKKOS_ADD_TEST(${NAME}
  CATEGORIES PERFORMANCE
  ${ARGN}
)
ENDMACRO()


MACRO(KOKKOS_PACKAGE_POSTPROCESS)
  if (KOKKOS_HAS_TRILINOS)
    TRIBITS_PACKAGE_POSTPROCESS()
  endif()
ENDMACRO(KOKKOS_PACKAGE_POSTPROCESS)

FUNCTION(KOKKOS_LIB_TYPE LIB RET)
GET_TARGET_PROPERTY(PROP ${LIB} TYPE)
IF (${PROP} STREQUAL "INTERFACE_LIBRARY")
  SET(${RET} "INTERFACE" PARENT_SCOPE)
ELSE()
  SET(${RET} "PUBLIC" PARENT_SCOPE)
ENDIF()
ENDFUNCTION(KOKKOS_LIB_TYPE)


FUNCTION(KOKKOS_LIB_DEFAULT_INCLUDE_DIRECTORIES TARGET)
IF(KOKKOS_HAS_TRILINOS)
  #ignore the target, tribits doesn't do anything directly with targets
  TRIBITS_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
  TRIBITS_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
ELSEIF(KOKKOS_SEPARATE_LIBS)
  KOKKOS_LIB_TYPE(${TARGET} INCTYPE) 
  TARGET_INCLUDE_DIRECTORIES(${TARGET} ${INCTYPE}
      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
  TARGET_INCLUDE_DIRECTORIES(${TARGET} ${INCTYPE}
      $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
  TARGET_INCLUDE_DIRECTORIES(${TARGET} ${INCTYPE}
      $<BUILD_INTERFACE:${KOKKOS_TOP_BUILD_DIR}>)
  TARGET_INCLUDE_DIRECTORIES(${TARGET} ${INCTYPE}
      $<INSTALL_INTERFACE:include>)
ELSE() #append to a list for later
  SET_PROPERTY(GLOBAL APPEND PROPERTY KOKKOS_BUILD_INTERFACE_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR})
  SET_PROPERTY(GLOBAL APPEND PROPERTY KOKKOS_BUILD_INTERFACE_INCLUDES ${CMAKE_CURRENT_BINARY_DIR})
ENDIF()
ENDFUNCTION(KOKKOS_LIB_DEFAULT_INCLUDE_DIRECTORIES)


FUNCTION(KOKKOS_TARGET_INCLUDE_DIRECTORIES TARGET)
IF(KOKKOS_HAS_TRILINOS)
  #tribits doesn't support this - include directories must be set before target
  #TRIBITS_INCLUDE_DIRECTORIES(${TARGET} ${ARGN})
ELSEIF(TARGET ${TARGET}) 
  #the target actually exists - this means we are doing separate libs
  #or this a test library
  TARGET_INCLUDE_DIRECTORIES(${TARGET} ${INCTYPE} ${ARGN})
ELSE()
  GET_PROPERTY(LIBS GLOBAL PROPERTY KOKKOS_LIBRARIES_NAMES)
  IF (${TARGET} IN_LIST LIBS)
     SET_PROPERTY(GLOBAL APPEND PROPERTY KOKKOS_LIBRARY_INCLUDES ${ARGN})
  ELSE()
    MESSAGE(FATAL_ERROR "Trying to set include directories on unknown target ${TARGET}")
  ENDIF()
ENDIF()
ENDFUNCTION(KOKKOS_TARGET_INCLUDE_DIRECTORIES TARGET)

FUNCTION(KOKKOS_LINK_INTERNAL_LIBRARY TARGET DEPLIB)
IF(KOKKOS_HAS_TRILINOS)
  #do nothing
ELSEIF(KOKKOS_SEPARATE_LIBS)
  SET(options INTERFACE)
  SET(oneValueArgs)
  SET(multiValueArgs)
  CMAKE_PARSE_ARGUMENTS(PARSE 
    "INTERFACE"
    ""
    ""
    ${ARGN})
  SET(LINK_TYPE)
  IF(PARSE_INTERFACE)
    SET(LINK_TYPE INTERFACE)
  ELSE()
    SET(LINK_TYPE PUBLIC)
  ENDIF()
    TARGET_LINK_LIBRARIES(${TARGET} ${LINK_TYPE} ${DEPLIB})
    VERIFY_EMPTY(KOKKOS_LINK_INTERNAL_LIBRARY ${PARSE_UNPARSED_ARGUMENTS})
  ELSE()
    #only a single lib - so nothing to do here
ENDIF()
ENDFUNCTION(KOKKOS_LINK_INTERNAL_LIBRARY)

FUNCTION(KOKKOS_ADD_INTERFACE_LIBRARY NAME)
IF (KOKKOS_HAS_TRILINOS)
  TRIBITS_ADD_LIBRARY(${NAME} ${ARGN})
ELSE()
  IF (KOKKOS_SEPARATE_LIBS)
    ADD_LIBRARY(${NAME} INTERFACE)
    #I hate that property append doesn't have a remove duplicates
    GET_PROPERTY(LIBLIST GLOBAL PROPERTY KOKKOS_LIBRARIES_NAMES)
    LIST(APPEND LIBLIST ${NAME})
    LIST(REMOVE_DUPLICATES LIBLIST)
    SET_PROPERTY(GLOBAL PROPERTY KOKKOS_LIBRARIES_NAMES ${LIBLIST})
    GET_PROPERTY(LIBLIST GLOBAL PROPERTY KOKKOS_LIBRARIES_NAMES)
  ENDIF()
ENDIF()
ENDFUNCTION(KOKKOS_ADD_INTERFACE_LIBRARY)

FUNCTION(KOKKOS_ADD_TEST_LIBRARY NAME)
IF (KOKKOS_HAS_TRILINOS)
  TRIBITS_ADD_LIBRARY(${NAME} ${ARGN} TESTONLY)
ELSE()
  SET(oneValueArgs)
  SET(multiValueArgs HEADERS SOURCES)

  CMAKE_PARSE_ARGUMENTS(PARSE 
    "STATIC;SHARED"
    ""
    "HEADERS;SOURCES"
    ${ARGN})

  IF(PARSE_HEADERS)
    LIST(REMOVE_DUPLICATES PARSE_HEADERS)
  ENDIF()
  IF(PARSE_SOURCES)
    LIST(REMOVE_DUPLICATES PARSE_SOURCES)
  ENDIF()
  ADD_LIBRARY(${NAME} ${PARSE_SOURCES})
  target_compile_options(
    ${NAME}
    PUBLIC $<$<COMPILE_LANGUAGE:CXX>:${KOKKOS_CXX_FLAGS}>
  )
  target_link_libraries(
    ${NAME}
    PUBLIC ${KOKKOS_LD_FLAGS}
  )
ENDIF()
ENDFUNCTION(KOKKOS_ADD_TEST_LIBRARY)


FUNCTION(KOKKOS_TARGET_COMPILE_DEFINITIONS TARGET VISIBILITY)
IF(KOKKOS_HAS_TRILINOS)
  #tribits doesn't support this - do nothing
ELSEIF(TARGET ${TARGET}) 
  #the target actually exists - this means we are doing separate libs
  #or this a test library
  TARGET_COMPILE_DEFINITIONS(${TARGET} ${VISIBILITY} ${ARGN})
ELSE()
 GET_PROPERTY(LIBS GLOBAL PROPERTY KOKKOS_LIBRARIES_NAMES)
 IF (${TARGET} IN_LIST LIBS)
  SET_PROPERTY(GLOBAL APPEND PROPERTY KOKKOS_LIBRARY_DEFINITIONS ${ARGN})
 ELSE()
  MESSAGE(FATAL_ERROR "Trying to set compile definitions on unknown target ${TARGET}")
 ENDIF()
ENDIF()
ENDFUNCTION(KOKKOS_TARGET_COMPILE_DEFINITIONS)

FUNCTION(KOKKOS_INCLUDE_DIRECTORIES)
IF(KOKKOS_HAS_TRILINOS)
  TRIBITS_INCLUDE_DIRECTORIES(${ARGN})
ELSE()
  CMAKE_PARSE_ARGUMENTS(
    INC
    "REQUIRED_DURING_INSTALLATION_TESTING"
    ""
    ""
    ${ARGN}
  )
  INCLUDE_DIRECTORIES(${INC_UNPARSED_ARGUMENTS})
ENDIF()
ENDFUNCTION(KOKKOS_INCLUDE_DIRECTORIES)

MACRO(KOKKOS_MAKE_LIBKOKKOS)
GET_PROPERTY(SRCS GLOBAL PROPERTY KOKKOS_ALL_SOURCES)
GET_PROPERTY(INCS GLOBAL PROPERTY KOKKOS_BUILD_INTERFACE_INCLUDES)
GET_PROPERTY(DEFS GLOBAL PROPERTY KOKKOS_COMPILE_DEFINITIONS)
KOKKOS_INTERNAL_ADD_LIBRARY(kokkos SOURCES ${SRCS})
FOREACH(INC ${INCS})
  TARGET_INCLUDE_DIRECTORIES(kokkos PUBLIC $<BUILD_INTERFACE:${INC}>)
ENDFOREACH()
TARGET_INCLUDE_DIRECTORIES(kokkos PUBLIC $<BUILD_INTERFACE:${KOKKOS_TOP_BUILD_DIR}>)
TARGET_INCLUDE_DIRECTORIES(kokkos PUBLIC $<INSTALL_INTERFACE:include>)
FOREACH(DEF ${DEFS})
  TARGET_COMPILE_DEFINITIONS(kokkos PUBLIC ${DEF})
ENDFOREACH()
ENDMACRO()

MACRO(KOKKOS_ADD_COMPILE_OPTIONS)
ADD_COMPILE_OPTIONS(${ARGN})
ENDMACRO()

